package com.company.day008;

public class Repeat001 {
	public static void main(String[] args) {

	}
}
/*  ~09:15
1. OOP?
  - ( 객체지향 )  프로그래밍 
  - ( 클래스-부품객체 )  조립해      완성된 프로그램 만드는 기법


2. 클래스 (부품객체)
      속성       + 행위를 갖는다
      (멤버변수)  + (멤버메서드)


4. 클래스, 객체, 인스턴스화   → 붕어빵틀과 붕어빵으로 해당비유를 채우세요! 
- 1. 클래스 의미(붕어빵틀)  
- 2. 인스턴스화(실제메모리에 붕어빵만들기)를 통해 
- 3. 객체(붕어빵)만들기
- 4. 인스턴스는 각 객체들의 각기다른 속성 ( 팥붕어빵, 초코붕어빵)


5.    A a1 = new A();
       1)  (  new   ) 가    (heap) 메모리빌려오기, 객체생성 - 1000번지
       2)  (  A()   )  생성자 초기화 
       3)  a1 갖고있는것은? (  1000번지  - stack  )


6.  생성자
     class  A{
        String name;
        A(){}
        A(String name){  this.name = name; }
    }
  - 생성자는  (  초기화  )담당
  - 모든생성자는 생성자가 반드시 한개이상 존재
  - 생성자 생략시 컴파일러가 자동으로 기본생성자 추가
  - 생성자 직접 선언시 기본생성자 자동생성자 취소

  -  참고) public static  리턴값  메서드명(파라미터){}
                               A(){}
                               A(String name){  this.name = name; }
  -  생성자는 (리턴값) 없다 , (클래스명)이랑 동일
 

7.  클래스 초기화순서
  (  기본값  )  →  ( 명시적초기화 )  → (  초기화블록 )  → (  생성자 )


8.  static 
-  jvm 소스로딩시 메모리할당받을때  사용가능하게
-  new 보다 먼저 실행 , (   하나  )만 생성
-  클래스 변수   (  클래스명.변수, 클래스명.메서드명 )
-  객체생성과 관련이 없음 (new, heap, this , A() ......................x)
------------------------------------------------
[method : 코드분석, static, final: 정보저장]  #
------------------------------------------------
[heap: 동적]	          | [stack: 임시]
------------------------------------------------


9. final
- 변경하지마
- 상수-(  수정 )하지마 ,  메서드- ( 오버로딩 )하지마, 클래스-( 상속 )하지마


10. 지정접근자
public: 아무데서나(클래스에서나) 접근가능
             > protected : extends 키워드 쓴데서 ( 자식 ) 
                             > package (default) :   같은폴더(package)  import 안해도 사용가능
                                         > private : 클래스 내부에서만

	
	a. 접근제어자가 사용 넓은범위에서 좁은것순으로 적으시오.  
          ( public > protected> package > private   )

	b. 접근제어자의 사용범위를 적으시오. 
	    			   클래스내부		동일패키지		하위클래스		그외
		(	 public   )		O				O			O		O
		(    protected)		O				O			O		X
		(    package  )		O				O			X		X
		(    private  )		O				X			X		X
	
                                          

11.  클래스배열
 1.   Score [] score = new Score[3];
    //1) new  메모리빌리기,객체생성
    //2) Score라는 자료형의 틀로  3개의미
    //3)   3:  0~2    score[0] /  score[1] /  score[2] 

    //4)  score  출력하면  생성자호출한적이 없어서  (      null       ) 값이 나온다.
           생성자- 초기화해서 사용가능하게 한다라는 의미

    1000번지 Score[  null  |  null  |  null  ]  ← score

 2.  생성자호출해서 초기화해서 사용가능하게 만들기
    score[0] = new Score("아이언맨" , 100, 100 , 100);

 



*/